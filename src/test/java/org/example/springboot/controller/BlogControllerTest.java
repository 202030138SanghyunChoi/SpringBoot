package org.example.springboot.controller;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.springboot.domain.Article;
import org.example.springboot.dto.AddArticleRequest;
import org.example.springboot.repository.ArticleRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

// Spring Boot Test Annotation
// MockMVC 를 생성하고 자동으로 구성.(MockMVC - 서버 배포를 하지 않고 테스트 환경 제공)
@SpringBootTest
@AutoConfigureMockMvc
class BlogControllerTest {
    // ????????????????????????????????????????????????????????????????????????????????????????????????????
    @Autowired
    protected MockMvc mockMvc;

    // JSON 변환 시 사용
    @Autowired
    protected ObjectMapper objectMapper;

    // ????????????????????????????????????????????????????????????????????????????????????????????????????
    @Autowired
    private WebApplicationContext webApplicationContext;

    // 리포지토리 사용(JpaRepository extends)
    @Autowired
    private ArticleRepository articleRepository;
    
    // test 종료 시 마다 수행
    @BeforeEach
    public void mockMvcSetup() {
        // ????????????????????????????????????????????????????????????????????????????????????????????????????
        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
        // 테스트 해놓은 것들 전부 삭제
        articleRepository.deleteAll();
    }

    @DisplayName("addArticle: POST MAPPING(CREATE)")
    @Test
    public void addArticle() throws Exception {
        // given(테스트 실행 준비)
        // 테스트에 사용되는 것들 설정
        final String url = "/api/articles";
        final String title = "testTitle";
        final String content = "testContent";
        final AddArticleRequest request = new AddArticleRequest(title, content);

        // objectMapper 를 사용하여 직렬화(JSON 으로 변환)
        // ????????????????????????????????????????????????????????????????????????????????????????????????????
        final String requestBody = objectMapper.writeValueAsString(request);
        System.out.println(requestBody);

        // when(테스트 실행)
        // perform() 메서드로 요청 전송(ResultActions 객체 반환).
        // ????????????????????????????????????????????????????????????????????????????????????????????????????
        ResultActions result = mockMvc.perform( post(url).contentType(MediaType.APPLICATION_JSON_VALUE).content(requestBody) );

        // then(테스트 결과 검증)
        // Http 응답코드가 Create(201)인지 확인
        result.andExpect(status().isCreated());

        // Article 전부 가져오기
        List<Article> articleList = articleRepository.findAll();
        // 1개 생성되었는 지 검증
        assertThat(articleList.size()).isEqualTo(1);
        // 처음(1개밖에 없지만) article 의 title 과 content 가 위에서 설정한 값과 일치하는 지 검증
        assertThat(articleList.get(0).getTitle()).isEqualTo(title);
        assertThat(articleList.get(0).getContent()).isEqualTo(content);
    }
}